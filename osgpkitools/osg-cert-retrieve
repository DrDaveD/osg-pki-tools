#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
This script is used to retrieve certificates. This script requires no
authentication. It will check the status of the request and request
issuance of the certificate if needed (i.e. it is in the APPROVED
state), wait for that issuance to complete, and then retrieve the
certificate.

Not that between requesting a certificate and retrieving it, it is
required for a registration authority to approve the certificate
through the webUI.

This script checks to see if the output file exists and prompts the
user if it does.
"""

import httplib
import socket
import sys
from optparse import OptionParser
import os
import subprocess
from ssl import SSLError
import tempfile

from osgpkitools import OSGPKIUtils
from osgpkitools import ConnectAPI
from osgpkitools.OSGPKIUtils import charlimit_textwrap
from osgpkitools.OSGPKIUtils import read_config
from osgpkitools.OSGPKIUtils import extractEEC
from osgpkitools.OSGPKIUtils import extractHostname
from osgpkitools.OSGPKIUtils import check_permissions
from osgpkitools.OSGPKIUtils import version_info
from osgpkitools.OSGPKIUtils import find_existing_file_count
from osgpkitools.OSGPKIUtils import print_exception_message
from osgpkitools.OSGPKIUtils import print_uncaught_exception

from osgpkitools.ExceptionDefinitions import *




# Set up Option Parser
#

def parse_args():
    """This function parses all the arguments, validates them and then stores them in a dictionary that is used throughout in the script."""

    usage = \
        'usage: %prog [options] <Request ID>\nUsage: %prog -h/--help [for detailed explanations of options]'
    parser = OptionParser(usage)
    parser.add_option(
        '-o',
        '--certfile',
        action='store',
        dest='certfile',
        help='Specify the output filename for the retrieved user certificate\n. Default is ./hostcert.pem',
        metavar='ID',
        default='hostcert.pem',
        )
    parser.add_option(
        '-T',
        '--test',
        action='store_true',
        dest='test',
        help='(For developers) Run against OIM ITB',
        default=False,
        )
    parser.add_option(
        '-t',
        '--timeout',
        action='store',
        dest='timeout',
        help='Specify the timeout in minutes',
        default=5,
        )
    parser.add_option(
        '-q',
        '--quiet',
        action='store_false',
        dest='verbose',
        default=True,
        help="don't print status messages to stdout",
        )
    parser.add_option(
        '-d',
        '--directory',
        action='store',
        dest='write_directory',
        default='./',
        help="Write the output files to this directory",
        )
    parser.add_option(
        '-V',
        '--version',
        action='store_true',
        dest='version_info',
        help="Print version information and exit",
        )
    parser.add_option(
        '-i',
        '--id',
        action='store_true',
        dest='id',
        help='Specify ID# of certificate to be retrieved [deprecated]',
        metavar='ID',
        default=False
        )

    (args, values) = parser.parse_args()

    if args.version_info:
        version_info()
        sys.exit(0)

    num_args = len(values)
    if num_args == 1:
        reqid = values[0]
        try:
            int(reqid)
        except ValueError:
            parser.error('Expecting Request ID to be an integer, instead got: ' + reqid)
    else:
        parser.error("Wrong number of arguments (%s of 1): %s"
                     % (num_args, ', '.join(str(value) for value in values)))

    if args.id:
        charlimit_textwrap("The '-i' flag is deprecated and no longer needed when specifying a request ID.")

    timeout = int(args.timeout)
    if not timeout >= 0:
        raise ValueError('Invalid timeout value. Please enter a non-negative integer value.\n')

    pem_filename = args.certfile

    if args.write_directory:
        if args.write_directory[-1] != '/':
            args.write_directory = args.write_directory + '/'
        certdir = args.write_directory

    else:
        certdir = "./"

    if args.test:
        oim = True
    else:
        oim = False

    filetype = 'hostcert'
    fileext = 'pkcs7'
    filename = '%s.%s.%s' % (filetype, reqid, fileext)

    arguments = read_config(oim)
    if vars().has_key('args'):
        arguments.update({'args': args})
    if vars().has_key('values'):
        arguments.update({'values': values})

    if vars().has_key('pem_filename'):
        arguments.update({'pem_filename': pem_filename})

    arguments.update({'timeout': timeout})
    print 'Using timeout of %d minutes' % timeout
    arguments.update({'id': reqid})
    arguments.update({'filetype': filetype})
    arguments.update({'fileext': fileext})
    arguments.update({'filename': filename})
    arguments.update({'certdir':certdir})

    return arguments


def write_certificate(pkcs7raw):
    """Separating the writing logic for user certificate and process the pkcs7raw string."""
    temp_filename = tempfile.NamedTemporaryFile()
    cwd = None
    if arguments['certdir'] != "./":
        cwd = os.getcwd()
    try:
        temp_filename.write(pkcs7raw)
        temp_filename.flush()
        if cwd != None: #if the variable is set, i.e. the output path is not ./
            os.chdir(arguments['certdir'])
        subprocess.call([
            'openssl',
            'pkcs7',
            '-print_certs',
            '-in',
            os.path.abspath(temp_filename.name),
            '-out',
            arguments['pem_filename'],
            ])
        temp_filename.close()
        cert_string = open(arguments['pem_filename'], 'rb').read()
        hostname = extractHostname(cert_string)
        extracted_eec = extractEEC(cert_string, hostname)
        os.remove(arguments['pem_filename'])
        fh = open(arguments['pem_filename'], 'wb')
        fh.write(extracted_eec)
        os.chmod(arguments['pem_filename'], 0644)
        if cwd != None:
            os.chdir(cwd)
    except OSError:
        charlimit_textwrap('You may not have permission to write on the file system. ' +
                           'Please report the bug to %s.' % OSGPKIUtils.HELP_EMAIL)
        raise
    charlimit_textwrap('Certificate written to %s%s \n'
                       % (arguments['certdir'], arguments['pem_filename']))

if __name__ == '__main__':
    try:
        os.umask(0177)
        arguments = parse_args()
        path = os.getcwd()
        check_permissions(path)
        capi = ConnectAPI.ConnectAPI()
        print 'Connecting server to retrieve certificate...'
        OSGPKIUtils.start_timeout_clock(arguments['timeout'])
        pkcs7raw = capi.retrieve_unauthenticated(**arguments)
        if os.path.exists(arguments['pem_filename']):
            pem_filename = arguments['pem_filename']
            temp_name = pem_filename.split("/")[-1].split(".")[-2]
            pem_filename_old = temp_name + "-old.pem"
            subprocess.call(['mv', pem_filename, pem_filename_old])
            charlimit_textwrap("Moving existing file %s to %s "
                               % (arguments['pem_filename'], pem_filename_old))
        new_file_name = find_existing_file_count(arguments['pem_filename'])
        if new_file_name != arguments['pem_filename']:
            subprocess.call([
                'mv',
                arguments['pem_filename'],
                new_file_name])
            print 'Moving existing file ' + arguments['pem_filename'] + ' to ' + new_file_name
        write_certificate(pkcs7raw)

    except SystemExit as exc:
        # We need to specifically catch sys.exit() so that it doesn't hit the catchall Exception below and
        # print a confusing message for the user (SOFTWARE-1584)
        raise
    except KeyboardInterrupt as exc:
        print_exception_message(exc)
        sys.exit('''Interrupted by user\n''')
    except SSLError as exc:
        print_exception_message(exc)
        sys.exit('Please check for valid certificate.\n')
    except FileWriteException as exc:
        charlimit_textwrap(exc.message)
        charlimit_textwrap("The script will exit now\n")
        sys.exit(1)
    except FileNotFoundException as exc:
        charlimit_textwrap(exc.message + ':' + exc.filename)
        sys.exit(1)
    except (EOFError, ValueError, KeyError) as exc:
        print_exception_message(exc)
        sys.exit(1)
    except (socket.error, httplib.HTTPException) as exc:
        charlimit_textwrap('Connection to %s failed: %s' % (arguments['returl'], exc))
        sys.exit(1)
    except (Exception_500response, NotOKException) as exc:
        charlimit_textwrap('Request Failed. Status %s' % exc.status)
        charlimit_textwrap('Reason for failure %s' % exc.message)
        sys.exit(1)
    except (ValidationException, InvalidOptionException, NotApprovedException,
            OSError, UnexpectedBehaviourException) as exc:
        charlimit_textwrap(exc.message)
        sys.exit(1)
    except Exception as exc:
        print_uncaught_exception()
        charlimit_textwrap('Uncaught Exception : Please report the bug to %s.' % OSGPKIUtils.HELP_EMAIL)
        sys.exit(1)
    sys.exit(0)
