#!/usr/bin/python

"""
This script submits a host certificate request for an unauthenticated
user.
"""

import httplib
import sys
import os
import argparse
from ssl import SSLError

from osgpkitools import OSGPKIUtils
from osgpkitools import ConnectAPI
from osgpkitools.ExceptionDefinitions import *


# Set up Option Parser
#

def parse_command_line():
    """This function parses all the arguments, validates them and then stores
    them in a dictionary that is used throughout in the script."""

    parser = argparse.ArgumentParser(add_help=False) # disable built-in help to control help message ordering

    # required options
    required = parser.add_argument_group('Required', 'Specify only one of -c/--csr and -H/--hostname')
    required.add_argument('-e', '--email', action='store', dest='email', required=True, metavar='EMAIL',
                          help='Email address to receive certificate')
    required.add_argument('-n', '--name', action='store', dest='name', required=True, metavar='NAME',
                          help='Name of user receiving certificate')
    required.add_argument('-p', '--phone', action=PhoneAction, dest='phone', required=True, metavar='PHONE',
                          help='Phone number of user receiving certificate')

    host_opts = required.add_mutually_exclusive_group(required=True)
    host_opts.add_argument('-c', '--csr', action='store', dest='csr', default=None, metavar='CSR',
                           help='The file containing a certificate signing request')
    host_opts.add_argument('-H', '--hostname', action='store', dest='hostname', metavar='CN', default=None,
                           help='The common name of the requested certificate (FQDN)')

    # explicity create optional group and help message to force required before optional opts in help message
    optional = parser.add_argument_group('Optional')
    optional.add_argument('-h', '--help', action='help',
                          help='show this help message and exit')
    optional.add_argument('-o', '--outkeyfile', action='store', dest='keyfile', metavar='OUTPUT KEYFILE',
                          help='The filename of the generated host key (default: hostkey.pem)',
                          default='hostkey.pem')
    optional.add_argument('-v', '--vo', action='store', dest='vo', metavar='VO name', default=None,
                          help='Specify the VO for the host request')
    optional.add_argument('-y', '--cc', action='store', dest='cc_list', metavar='CC LIST', default='',
                          help="Comma-separated CC list CC list of the request")
    optional.add_argument('-m', '--comment', action='store', dest='comment', metavar='COMMENT', default='',
                          help='The comment to be added to the request')
    optional.add_argument('-a', '--altname', action='append', dest='alt_names', metavar='HOSTNAME', default=[],
                          help='Specify an alternative hostname for the CSR (FQDN). May be used more than once')
    optional.add_argument('-t', '--timeout', action=TimeoutAction, type=int, dest='timeout', default=5,
                          help='Specify the timeout in minutes')
    optional.add_argument('-T', '--test', action='store_true', dest='test', help='Run in test mode', default=False)
    optional.add_argument('-q', '--quiet', action='store_false', dest='verbose', default=True,
                          help="don't print status messages to stdout")
    optional.add_argument('-d', '--directory', action='store', dest='write_directory', default='.',
                          help="Write the generated host key to this directory")
    optional.add_argument('--unauthenticated', action='store_true', dest='unauthenticated', default=False,
                          help='Force unauthenticated certificate request')
    optional.add_argument('-V', '--version', action='version', version=OSGPKIUtils.VERSION_NUMBER)

    return parser.parse_args()

class PhoneAction(argparse.Action):
    """Action for validating phone number option
    """
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError("-p/--phone only accepts a single argument")
        super(PhoneAction, self).__init__(option_strings, dest, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        phone_num = values.replace('-', '')
        if phone_num.isdigit():
            setattr(namespace, self.dest, phone_num)
        else:
            raise ValueError("Phone number should only contain numbers and '-'")

class TimeoutAction(argparse.Action):
    """Action for validating timeout option
    """
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError("-t/--timeout only accepts a single argument")
        super(TimeoutAction, self).__init__(option_strings, dest, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        if values > 0:
            setattr(namespace, self.dest, int(values))
        else:
            raise ValueError("Invalid timeout value. Please enter a value greater than 0.")

def unauthenticated_request(config, name, email, phone, hostname=None, altnames=None,
                            csr_path=None, write_directory=None, comment=None, cc=None):
    """Intermediary function for making unauthenticated cert requests. Hopefully most of this can be refactored into
    ConnectAPI.ConnectAPI.request_unauthenticated
    """
    if (not hostname and not csr_path) or (hostname and csr_path):
        raise TypeError("unauthenticated_request() requires only one of hostname or csr_path arguments to be defined")

    if csr_path is None:
        common_name = hostname.replace('/', '-')
        cert = OSGPKIUtils.Cert(common_name,
                                keypath=os.path.join(write_directory, common_name + '-key.pem'),
                                altnames=altnames,
                                email=email)
        cert.write_pkey()

        csr = cert.base64_csr()
    else:
        OSGPKIUtils.charlimit_textwrap('CSR input found. Skipping creation of the primary key')
        try:
            csr = OSGPKIUtils.format_csr(open(csr_path, 'rb').read())
        except OSError, exc:
            OSGPKIUtils.charlimit_textwrap('Failed to read CSR file: %s' % exc)
            sys.exit(1)

    capi = ConnectAPI.ConnectAPI()
    capi.request_unauthenticated(config, name, email, phone, csr, comment, cc)
    OSGPKIUtils.charlimit_textwrap('Request Id#: %s' % capi.reqid)

if __name__ == '__main__':
    try:
        os.umask(0177)
        try:
            ARGS = parse_command_line()
        except ValueError, exc:
            OSGPKIUtils.print_exception_message(exc)
            sys.exit(2)
        CONFIG = OSGPKIUtils.read_config(ARGS.test)
        OSGPKIUtils.start_timeout_clock(ARGS.timeout)
        unauthenticated_request(CONFIG, ARGS.name, ARGS.email, ARGS.phone, ARGS.hostname, ARGS.alt_names,
                                    ARGS.csr, ARGS.write_directory, ARGS.comment, ARGS.cc)
    except KeyboardInterrupt, exc:
        OSGPKIUtils.print_exception_message(exc)
        sys.exit('''Interrupted by user\n''')
    except SystemExit:
        # We need to specifically catch sys.exit() so that it doesn't hit the catchall Exception below and
        # print a confusing message for the user (SOFTWARE-1584)
        raise
    except SSLError, exc:
        OSGPKIUtils.print_exception_message(exc)
        sys.exit('Please check for valid certificate.\n')
    except httplib.HTTPException, exc:
        OSGPKIUtils.charlimit_textwrap('Connection to %s failed: %s' % (CONFIG['requrl'], repr(exc)))
    except FileNotFoundException, exc:
        OSGPKIUtils.charlimit_textwrap(exc.message + ':' + exc.filename)
        sys.exit(1)
    except (Exception_500response, NotOKException), exc:
        OSGPKIUtils.charlimit_textwrap('Request Failed. Status %s' % exc.status)
        OSGPKIUtils.charlimit_textwrap('Reason for failure %s' % exc.message)
        sys.exit(1)
    except CertificateMismatchException, exc:
        print 'The number of requests made was ', exc.request_num
        print 'The number of certificates received is ', exc.retrieve_num
        OSGPKIUtils.charlimit_textwrap(exc.message)
        sys.exit(1)
    except (BadPassphraseException, HandshakeFailureException, UnexpectedBehaviourException, InvalidOptionException), exc:
        OSGPKIUtils.charlimit_textwrap(exc.message)
        sys.exit(1)
    except (EOFError, OSError, KeyError, IOError), exc:
        OSGPKIUtils.print_exception_message(exc)
        sys.exit(1)
    except Exception:
        OSGPKIUtils.print_uncaught_exception()
        OSGPKIUtils.charlimit_textwrap('Uncaught Exception : Please report the bug to goc@opensciencegrid.org.')
        sys.exit(1)
    sys.exit(0)
