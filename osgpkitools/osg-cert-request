#!/usr/bin/python

"""
This script submits a host certificate request for an unauthenticated
user.
"""

import httplib
import socket
import sys
import os
import argparse
from ssl import SSLError

# Set up Option Parser
#

def parse_command_line():
    """This function parses all the arguments, validates them and then stores
    them in a dictionary that is used throughout in the script."""

    parser = argparse.ArgumentParser(add_help=False) # disable built-in help to control help message ordering

    # required options
    required = parser.add_argument_group('Required', 'Specify only one of -c/--csr and -H/--hostname')
    required.add_argument('-e', '--email', action='store', dest='email', required=True, metavar='EMAIL',
                          help='Email address to receive certificate')
    required.add_argument('-n', '--name', action='store', dest='name', required=True, metavar='NAME',
                          help='Name of user receiving certificate')
    required.add_argument('-p', '--phone', action=PhoneAction, dest='phone', required=True, metavar='PHONE',
                          help='Phone number of user receiving certificate')
    required.add_argument('-c', '--csr', action='store', dest='csr', default=None, metavar='CSR',
                          help='The file containing a certificate signing request')
    required.add_argument('-H', '--hostname', action='store', dest='hostname', metavar='CN', default=None,
                          help='The common name of the requested certificate (FQDN)')

    # explicity create optional group and help message to force required before optional opts in help message
    optional = parser.add_argument_group('Optional')
    optional.add_argument('-h', '--help', action='help',
                          help='show this help message and exit')
    optional.add_argument('-o', '--outkeyfile', action='store', dest='keyfile', metavar='OUTPUT KEYFILE',
                          help='The filename of the generated host key (default: hostkey.pem)',
                          default='hostkey.pem')
    optional.add_argument('-v', '--vo', action='store', dest='vo', metavar='VO name', default=None,
                          help='Specify the Virtual Organization (VO) for the host request. Required for domains ' + \
                          'represented by multiple VOs. See https://oim.opensciencegrid.org/oim/gridadmin for a ' + \
                          'list of domains and VOs.')
    optional.add_argument('-y', '--cc', action='store', dest='cc_list', metavar='CC LIST', default='',
                          help="Comma-separated CC list CC list of the request")
    optional.add_argument('-m', '--comment', action='store', dest='comment', metavar='COMMENT', default='',
                          help='The comment to be added to the request')
    optional.add_argument('-a', '--altname', action='append', dest='alt_names', metavar='HOSTNAME', default=[],
                          help='Specify an alternative hostname for the CSR (FQDN). May be used more than once')
    optional.add_argument('-t', '--timeout', action=TimeoutAction, type=int, dest='timeout', default=5,
                          help='Specify the timeout in minutes')
    optional.add_argument('-T', '--test', action='store_true', dest='test', help='(For developers) Run against OIM ITB',
                          default=False)
    optional.add_argument('-q', '--quiet', action='store_false', dest='verbose', default=True,
                          help="don't print status messages to stdout")
    optional.add_argument('-d', '--directory', action='store', dest='write_directory', default='.',
                          help="Write the generated host key to this directory")
    optional.add_argument('--unauthenticated', action='store_true', dest='unauthenticated', default=False,
                          help='Force unauthenticated certificate request')
    optional.add_argument('-V', '--version', action='version', version=OSGPKIUtils.VERSION_NUMBER)

    args = parser.parse_args()

    # We have to perform a manual check since add_mutually_exclusive_group(required=True) doesn't work if it's not added
    # directly to the parser instance. But if we add it directly to the parser, it'll mess up the formatting of the help
    # message
    if (not args.hostname and not args.csr) or (args.hostname and args.csr):
        parser.print_usage()
        raise ValueError("osg-cert-request: error: Specify only one of -c/--csr and -H--hostname")

    return args

class PhoneAction(argparse.Action):
    """Action for validating phone number option
    """
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError("-p/--phone only accepts a single argument")
        super(PhoneAction, self).__init__(option_strings, dest, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        phone_num = values.replace('-', '')
        if phone_num.isdigit():
            setattr(namespace, self.dest, phone_num)
        else:
            parser.print_usage()
            raise ValueError("Phone number should only contain numbers and '-'")

class TimeoutAction(argparse.Action):
    """Action for validating timeout option
    """
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError("-t/--timeout only accepts a single argument")
        super(TimeoutAction, self).__init__(option_strings, dest, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        if values > 0:
            setattr(namespace, self.dest, int(values))
        else:
            parser.print_usage()
            raise ValueError("Invalid timeout value. Please enter a value greater than 0.")

def unauthenticated_request(config, name, email, phone, hostname=None, altnames=None, csr_path=None,
                            write_directory=None, vo=None, cc=None, comment=None):
    """Intermediary function for making unauthenticated cert requests. Hopefully most of this can be refactored into
    ConnectAPI.ConnectAPI.request_unauthenticated
    """
    if (not hostname and not csr_path) or (hostname and csr_path):
        raise TypeError("unauthenticated_request() requires only one of hostname or csr_path arguments to be defined")

    capi = ConnectAPI.ConnectAPI()

    if csr_path is None:
        cert = OSGPKIUtils.Cert(hostname, write_directory, altnames=altnames, email=email)
        csr = cert.base64_csr()
        try:
            capi.request_unauthenticated(config, name, email, phone, csr, vo, cc, comment)
        except:
            os.remove(cert.newkey)
            raise
        else:
            print "Writing key to %s" % cert.final_keypath
            cert.write_pkey()
    else:
        OSGPKIUtils.charlimit_textwrap('CSR input found. Skipping creation of the primary key')
        try:
            csr = OSGPKIUtils.format_csr(open(csr_path, 'rb').read())
        except OSError, exc:
            OSGPKIUtils.charlimit_textwrap('Failed to read CSR file: %s' % exc)
            sys.exit(1)
        capi.request_unauthenticated(config, name, email, phone, csr, vo, cc, comment)

    print 'OIM Request ID: %s' % capi.reqid

def main():
    """Request certificates from OIM, defaulting to authenticated (GridAdmin) requests but falling back to
    an unauthenticated request if we cannot find a valid user cert/key pair
    """
    os.umask(0177)
    try:
        args = parse_command_line()
    except ValueError, exc:
        print exc
        sys.exit(2)
    config = OSGPKIUtils.read_config(args.test)
    OSGPKIUtils.start_timeout_clock(args.timeout)

    if args.unauthenticated:
        unauthenticated_request(config, args.name, args.email, args.phone, args.hostname, args.alt_names, args.csr,
                                args.write_directory, args.vo, args.cc_list, args.comment)
    else:
        try:
            msg = "Defaulting to authenticated certificate requests. " + \
                  "If you want to force unauthenticated requests, use the '--unauthenticated' option."
            OSGPKIUtils.charlimit_textwrap(msg)
            usercert, userkey = OSGPKIUtils.find_user_cred()
            ssl_ctx = OSGPKIUtils.get_ssl_context(usercert, userkey)
        except IOError:
            msg = "Could not find user certificate/key pair, making unauthenticated request..."
            OSGPKIUtils.charlimit_textwrap(msg)
            unauthenticated_request(config, args.name, args.email, args.phone, args.hostname, args.alt_names, args.csr,
                                    args.write_directory, args.vo, args.cc_list, args.comment)
        else:
            cert = OSGPKIUtils.Cert(args.hostname, args.write_directory, altnames=args.alt_names, email=args.email)

            try:
                oim = ConnectAPI.ConnectAPI()
                print 'Requesting certificate...'
                oim.request_authenticated(config, [cert.base64_csr()], ssl_ctx, args.vo, args.cc_list)
                print 'OIM Request ID: %s' % oim.reqid

                print 'Connecting to server to approve certificate...'
                oim.approve(config, ssl_ctx)

                print 'Retrieving certificate...'
                hostname, cert_string = oim.retrieve(config)[0]
            except:
                os.remove(cert.newkey)
                raise
            else:
                print "Writing key to %s" % cert.final_keypath
                cert.write_pkey()

            # Escape '/' in service certs
            cert_path = os.path.join(args.write_directory, hostname.replace('/', '_') + '.pem')
            OSGPKIUtils.safe_rename(cert_path)
            OSGPKIUtils.atomic_write(cert_path, cert_string)
            os.chmod(cert_path, 0644)
            OSGPKIUtils.charlimit_textwrap('Certificate written to %s' % cert_path)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt as exc:
        OSGPKIUtils.print_exception_message(exc)
        sys.exit('''Interrupted by user\n''')
    except SystemExit:
        # We need to specifically catch sys.exit() so that it doesn't hit the catchall Exception below and
        # print a confusing message for the user (SOFTWARE-1584)
        raise
    except SSLError as exc:
        OSGPKIUtils.print_exception_message(exc)
        sys.exit('Please check for valid certificate.\n')
    except (socket.error, httplib.HTTPException) as exc:
        OSGPKIUtils.charlimit_textwrap('Connection failed: %s' % repr(exc))
    except FileNotFoundException as exc:
        OSGPKIUtils.charlimit_textwrap(str(exc) + ':' + exc.filename)
        sys.exit(1)
    except (Exception_500response, NotOKException) as exc:
        OSGPKIUtils.charlimit_textwrap('Request Failed. Status %s' % exc.status)
        OSGPKIUtils.charlimit_textwrap('Reason for failure %s' % str(exc))
        sys.exit(1)
    except CertificateMismatchException as exc:
        print 'The number of requests made was ', exc.request_num
        print 'The number of certificates received is ', exc.retrieve_num
        OSGPKIUtils.charlimit_textwrap(str(exc))
        sys.exit(1)
    except (ConnectAPI.OIMException, EOFError, OSError, KeyError, IOError, BadPassphraseException,
            HandshakeFailureException, UnexpectedBehaviourException, InvalidOptionException) as exc:
        OSGPKIUtils.charlimit_textwrap('ERROR: ' + str(exc))
        sys.exit(1)
    except Exception:
        OSGPKIUtils.print_uncaught_exception()
        OSGPKIUtils.charlimit_textwrap('Uncaught Exception : Please report the bug to %s.' % OSGPKIUtils.HELP_EMAIL)
        sys.exit(1)
    sys.exit(0)
