#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
This script is used to submit multiple certifcate requests and
the intended user for the script is the GridAdmin.
This script requests certificates and then approves as well as issues them
in bulk (limit of 50 at a time).
This script works in two modes:
1) Requesting single host certificate with -H option
2) Request multiple host certificates with hostnames stored in a file -f option
"""

import httplib
import socket
import sys
import os

from ssl import SSLError
from optparse import OptionParser, OptionGroup
from M2Crypto import SSL

from osgpkitools import OSGPKIUtils
from osgpkitools.OSGPKIUtils import read_config
from osgpkitools.OSGPKIUtils import version_info
from osgpkitools.OSGPKIUtils import check_permissions
from osgpkitools.OSGPKIUtils import charlimit_textwrap
from osgpkitools.OSGPKIUtils import print_exception_message
from osgpkitools.OSGPKIUtils import print_uncaught_exception
from osgpkitools.OSGPKIUtils import get_ssl_context
from osgpkitools.ExceptionDefinitions import *
from osgpkitools import ConnectAPI


# Set up Option Parser
#

def parse_args():
    """This function parses all the arguments, validates them and then stores them
    in a dictionary that is used throughout the script."""

    usage = \
        'usage: %prog [options] arg\nUsage: %prog -h/--help [for detailed explanations of options]'
    parser = OptionParser(usage)
    group = OptionGroup(parser, 'Hostname Options',
                        '''Use either of these options.
Specify hostname as a single hostname using -H/--hostname
or specify from a file using -f/--hostfile.''')
    parser.add_option(
        '-k',
        '--pkey',
        action='store',
        dest='userprivkey',
        help="Specify Requestor's private key (PEM Format). If not specified" + \
             "will take the value of X509_USER_KEY or $HOME/.globus/userkey.pem",
        metavar='PKEY',
        default=None,
        )
    parser.add_option(
        '-c',
        '--cert',
        action='store',
        dest='usercert',
        help="Specify Requestor's certificate (PEM Format). If not specified, " + \
        "will take the value of X509_USER_CERT or $HOME/.globus/usercert.pem",
        default=None,
        metavar='CERT',
        )
    group.add_option(
        '-H',
        '--hostname',
        action='store',
        dest='hostname',
        help='Specify the hostname or service/hostname for which you want to request ' + \
        'the certificate for. If specified, -f/--hostfile will be ignored',
        metavar='HOSTNAME',
        default=None,
        )
    parser.add_option(
        '-a',
        '--altname',
        action='append',
        dest='alt_names',
        help='Specify an alternative hostname for CSR (FQDN). May be used more than ' + \
        'once and if specified, -f/--hostfile will be ignored',
        metavar='HOSTNAME',
        default=[]
        )
    group.add_option(
        '-f',
        '--hostfile',
        action='store',
        dest='hostfile',
        help='Filename with one host (hostname or service/hostname and its optional,' + \
        'alternative hostnames, separated by spaces) per line',
        metavar='HOSTFILE',
        default=None,
        )
    parser.add_option(
        '-v',
        '--vo',
        action='store',
        dest='vo',
        help='Specify the Virtual Organization (VO) for the host request. Required for domains represented by ' + \
        'multiple VOs. See https://oim.opensciencegrid.org/oim/gridadmin for a list of domains and VOs.',
        metavar='VO name',
        default=None,
        )
    parser.add_option(
        '-y',
        '--cc',
        action='store',
        dest='cc_list',
        help='Specify the CC list (the email id\'s to be CCed).' + \
             'Separate values by \',\'',
        metavar='CC List',
        default='',
        )
    parser.add_option(
        '-T',
        '--test',
        action='store_true',
        dest='test',
        help='(For developers) Run against OIM ITB',
        default=False,
        )
    parser.add_option(
        '-t',
        '--timeout',
        action='store',
        dest='timeout',
        help='Specify the timeout in minutes',
        default=5,
        )
    parser.add_option(
        '-q',
        '--quiet',
        action='store_false',
        dest='verbose',
        default=True,
        help="don't print status messages to stdout",
        )
    parser.add_option(
        '-d',
        '--directory',
        action='store',
        dest='write_directory',
        help="Write the output files to this directory",
        default='.'
        )
    parser.add_option(
        '-V',
        '--version',
        action='store_true',
        dest='version_info',
        help="Print version information and exit",
        )
    parser.add_option_group(group)
    (args, values) = parser.parse_args()

    if args.version_info:
        version_info()
        sys.exit(0)

    if not args.hostname:
        if args.hostfile is None:
            raise InsufficientArgumentException("InsufficientArgumentException: " + \
                                                "Please provide hostname(-H) or file name containing hosts(-f)\n")
        else:
            hostfile = args.hostfile
    else:
        hostname = args.hostname

    timeout = int(args.timeout)
    if not timeout >= 0:
        raise ValueError('Invalid timeout value. Please enter a non-negative integer value.\n')

    if not args.hostname:
        if os.path.exists(hostfile):
            pass
        else:
            raise FileNotFoundException(hostfile, 'Could not locate the hostfile')

    arguments = dict()
    arguments.update({'test': args.test})
    arguments.update({'vo' : args.vo})
    arguments.update({'mode': args.test})
    arguments.update({'cc_list': args.cc_list})
    if vars().has_key('args'):
        arguments.update({'args': args})
    if vars().has_key('values'):
        arguments.update({'values': values})
    if vars().has_key('hostname'):
        arguments.update({'hostname': hostname})
    arguments.update({'timeout': timeout})
    print 'Using timeout of %d minutes' % timeout
    arguments.update({'alt_names': args.alt_names})
    arguments.update({'usercert': args.usercert})
    arguments.update({'userprivkey': args.userprivkey})
    arguments.update({'certdir': args.write_directory})
    if vars().has_key('hostfile'):
        arguments.update({'hostfile': hostfile})
    return arguments


#################################################

def process_csr(config, bulk_csr, ssl_ctx, vo, cc_list, write_dir):
    """This function handles the entire processing of the request i.e.
    requesting. approving and then retrieving in sequence"""
    capi = ConnectAPI.ConnectAPI()

    try:
        capi.request_authenticated(config, bulk_csr, ssl_ctx, vo, cc_list)
    except Exception, exc:
        if 'sslv3 alert bad certificate' in exc:
            raise BadCertificateException("Error connecting to server: %s.\n" + \
                                          "Your certificate is not trusted by the server" % exc)
        else:
            raise

    print 'OIM Request ID: %s' % capi.reqid

    try:

        print 'Connecting to server to approve certificate...'
        capi.approve(config, ssl_ctx)

        print 'Issuing certificate...'
        certs = capi.retrieve(config)

        for hostname, cert_string in certs:
            # escape '/' in service certs
            cert_path = os.path.join(write_dir, hostname.replace('/', '_') + '.pem')
            OSGPKIUtils.safe_rename(cert_path)
            OSGPKIUtils.atomic_write(cert_path, cert_string)
            os.chmod(cert_path, 0644)
            OSGPKIUtils.charlimit_textwrap('Certificate written to %s' % cert_path)
    except httplib.HTTPException, exc:
        charlimit_textwrap('Connection failed: %s'% exc)
        raise
    except SystemExit, exc:
        if 'sslv3 alert bad certificate' in exc:
            raise BadCertificateException("Error connecting to server: %s.\n" + \
                                          "Your certificate is not trusted by the server" % exc)
        else:
            raise

if __name__ == '__main__':
    try:
        os.umask(0177)
        ARGS = parse_args()
        CONFIG = read_config(ARGS['test'])
        check_permissions(ARGS['certdir'])
        ssl_context = get_ssl_context(ARGS['usercert'], ARGS['userprivkey'])

        OSGPKIUtils.start_timeout_clock(ARGS['timeout'])

        if 'hostname' in ARGS:
            hosts = [tuple([ARGS['hostname'].strip()] + ARGS['alt_names'])]
        else:
            with open(ARGS['hostfile'], 'rb') as hosts_file:
                host_lines = hosts_file.readlines()
            hosts = [tuple(line.split()) for line in host_lines if line.strip()]

        # Construct host list, skipping duplicates and empty lines
        # NOTE: the same host with different SANs are not considered duplicates
        requests = list()
        certs = list()
        charlimit_textwrap('Beginning request process...')
        for host in set(hosts):
            common_name = host[0]
            sans = host[1:]
            cert_obj = OSGPKIUtils.Cert(common_name, ARGS['certdir'], altnames=sans)
            certs.append(cert_obj)

        # We choose to write the keys before the request in case there are issues with the certs and only then perform
        # cleanup if there's a failure; it's better to have keys and no certs than it is to have certs and no keys
        if len(certs):
            try:
                process_csr(CONFIG, [cert.base64_csr() for cert in certs], ssl_context,
                            ARGS['vo'], ARGS['cc_list'], ARGS['certdir'])
            except:
                for cert in certs:
                    os.remove(cert.newkey)
                raise
            else:
                charlimit_textwrap("Writing key(s) to %s" % ARGS['certdir'])
                for cert in certs:
                    cert.write_pkey()

    except SystemExit:
        # We need to specifically catch sys.exit() so that it doesn't hit the catchall Exception below and
        # print a confusing message for the user (SOFTWARE-1584)
        raise
    except SSLError as exc:
        print_exception_message(exc)
        sys.exit('Please check for valid certificate.\n')
    except KeyboardInterrupt as exc:
        print_exception_message(exc)
        sys.exit('''Interrupted by user\n''')
    except KeyError as exc:
        print_exception_message(exc)
        charlimit_textwrap('Key %s not found' % exc)
        sys.exit(1)
    except (socket.error, httplib.HTTPException) as exc:
        charlimit_textwrap('Connection failed: %s' % exc)
        sys.exit(1)
    except FileWriteException as exc:
        charlimit_textwrap(str(exc))
        charlimit_textwrap("The script will exit now\n")
        sys.exit(1)
    except FileNotFoundException as exc:
        charlimit_textwrap(str(exc) + ':' + exc.filename)
        sys.exit(1)
    except (Exception_500response, NotOKException) as exc:
        charlimit_textwrap('Request Failed. Status %s' % exc.status)
        charlimit_textwrap('Reason for failure %s' % str(exc))
        sys.exit(1)
    except CertificateMismatchException as exc:
        print 'The number of requests made was ', exc.request_num
        print 'The number of certificates received is ', exc.retrieve_num
        charlimit_textwrap(str(exc))
        sys.exit(1)
    except InsufficientArgumentException as exc:
        # I agree with mat on JIRA Software 1072 on that if a user enters
        # the script without options, there is no bug and shouldn't be
        # reported to goc. Hence bypassing call to print exception message
        charlimit_textwrap(str(exc))
        sys.stderr.write("Usage: osg-gridadmin-cert-request -h for help \n")
        sys.exit(2) # Fix for returning exit code of 2 as in all the other scripts.
    except (BadCertificateException, BadPassphraseException, HandshakeFailureException, ConnectAPI.OIMException,
            AttributeError, EnvironmentError, ValueError, EOFError, SSL.SSLError, UnexpectedBehaviourException) as exc:
        charlimit_textwrap(str(exc))
        sys.exit(1)
    except Exception:
        print_uncaught_exception()
        charlimit_textwrap('Uncaught Exception : Please report the bug to %s.' % OSGPKIUtils.HELP_EMAIL)
        sys.exit(1)
    sys.exit(0)
